Copyright 2014 Google Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0
    
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

# ===========================================================================
# This screencast demonstrates how to use the Puppet 'gce_compute' module to
# manage Google Compute Engine resources. Everything you need to replicate the
# demo can be found at,
# https://github.com/GoogleCloudPlatform/compute-video-demo-puppet

# We'll use the 'gce_compute' module to create and bootstrap four instances in
# two different zones, create a firewall rule to allow HTTP traffic, and also
# create a Compute Engine load-balancer. The Apache web server and a custom
# site page will be installed on aach instance.

# In this screencast, we have already created a Debian Compute Engine instance.
# We'll begin by installing the Puppet and then perform the demo.  We're
# following the instructions at,
# http://docs.puppetlabs.com/guides/install_puppet/install_debian_ubuntu.html
wget https://apt.puppetlabs.com/puppetlabs-release-wheezy.deb
sudo dpkg -i puppetlabs-release-wheezy.deb
sudo apt-get update
sudo apt-get install puppetmaster

# Now we'll install the required community puppet modules
sudo puppet module install puppetlabs-gce_compute
sudo puppet module install puppetlabs-apache

# Configure the device.conf file for your project,
PROJECT=$(/usr/share/google/get_metadata_value project-id)
sudo bash -c "cat > /etc/puppet/device.conf" <<EOF
[my_project]
  type gce
  url [/dev/null]:$PROJECT
EOF

# Since we're using 'root', we'll need to make sure to set up authorization.
# Cut/past the URL into an authenticated browser session, click Accpet, and
# then cut/paste the authorization token back into the terminal,
sudo gcloud auth login

# Check out the repo for the demo manifests,
git clone https://github.com/GoogleCloudPlatform/compute-video-demo-puppet
cd compute-video-demo-puppet

# Set up auto-signing puppet nodes matching our domain with,
echo "*.$(hostname --domain)" | sudo tee /etc/puppet/autosign.conf

# Copy over the manifest files,
sudo cp manifests/* /etc/puppet/manifests

# Copy the demo site page template,
sudo cp index.html.erb /etc/puppet/modules/apache/templates

# Apply the demo manifest to create the Compute Engine resources,
sudo puppet apply --certname=my_project /etc/puppet/manifests/puppet_up.pp

# We can check to make sure the new instances were registered with the
# puppet master with,
sudo puppet cert  list --all

# And we can use facter to check out details
sudo puppet node find puppet-agent-1 --render-as yaml

# Now let's grab the public IP from the load-balaner forwarding rule and
# test it out,
ip=$(sudo gcutil listforwardingrules --region us-central1 | grep puppet-rule | awk '{print $6}')
while [ 1 ]; do curl -sL http://$ip/ | grep \<title; sleep .5; done

# That's it, all done!  Don't forget to apply the puppet_down.pp manifest
# clean-up
exit

